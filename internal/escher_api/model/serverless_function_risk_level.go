// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ServerlessFunctionRiskLevel serverless function risk level
//
// swagger:model ServerlessFunctionRiskLevel
type ServerlessFunctionRiskLevel string

func NewServerlessFunctionRiskLevel(value ServerlessFunctionRiskLevel) *ServerlessFunctionRiskLevel {
	v := value
	return &v
}

const (

	// ServerlessFunctionRiskLevelNORISK captures enum value "NO_RISK"
	ServerlessFunctionRiskLevelNORISK ServerlessFunctionRiskLevel = "NO_RISK"

	// ServerlessFunctionRiskLevelLOW captures enum value "LOW"
	ServerlessFunctionRiskLevelLOW ServerlessFunctionRiskLevel = "LOW"

	// ServerlessFunctionRiskLevelMEDIUM captures enum value "MEDIUM"
	ServerlessFunctionRiskLevelMEDIUM ServerlessFunctionRiskLevel = "MEDIUM"

	// ServerlessFunctionRiskLevelHIGH captures enum value "HIGH"
	ServerlessFunctionRiskLevelHIGH ServerlessFunctionRiskLevel = "HIGH"

	// ServerlessFunctionRiskLevelCRITICAL captures enum value "CRITICAL"
	ServerlessFunctionRiskLevelCRITICAL ServerlessFunctionRiskLevel = "CRITICAL"
)

// for schema
var serverlessFunctionRiskLevelEnum []interface{}

func init() {
	var res []ServerlessFunctionRiskLevel
	if err := json.Unmarshal([]byte(`["NO_RISK","LOW","MEDIUM","HIGH","CRITICAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverlessFunctionRiskLevelEnum = append(serverlessFunctionRiskLevelEnum, v)
	}
}

func (m ServerlessFunctionRiskLevel) validateServerlessFunctionRiskLevelEnum(path, location string, value ServerlessFunctionRiskLevel) error {
	if err := validate.EnumCase(path, location, value, serverlessFunctionRiskLevelEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this serverless function risk level
func (m ServerlessFunctionRiskLevel) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateServerlessFunctionRiskLevelEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this serverless function risk level based on context it is used
func (m ServerlessFunctionRiskLevel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
