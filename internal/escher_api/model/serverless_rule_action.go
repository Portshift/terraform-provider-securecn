// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ServerlessRuleAction serverless rule action
//
// swagger:model ServerlessRuleAction
type ServerlessRuleAction string

func NewServerlessRuleAction(value ServerlessRuleAction) *ServerlessRuleAction {
	v := value
	return &v
}

const (

	// ServerlessRuleActionALLOW captures enum value "ALLOW"
	ServerlessRuleActionALLOW ServerlessRuleAction = "ALLOW"

	// ServerlessRuleActionDETECT captures enum value "DETECT"
	ServerlessRuleActionDETECT ServerlessRuleAction = "DETECT"

	// ServerlessRuleActionBLOCK captures enum value "BLOCK"
	ServerlessRuleActionBLOCK ServerlessRuleAction = "BLOCK"
)

// for schema
var serverlessRuleActionEnum []interface{}

func init() {
	var res []ServerlessRuleAction
	if err := json.Unmarshal([]byte(`["ALLOW","DETECT","BLOCK"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverlessRuleActionEnum = append(serverlessRuleActionEnum, v)
	}
}

func (m ServerlessRuleAction) validateServerlessRuleActionEnum(path, location string, value ServerlessRuleAction) error {
	if err := validate.EnumCase(path, location, value, serverlessRuleActionEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this serverless rule action
func (m ServerlessRuleAction) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateServerlessRuleActionEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this serverless rule action based on context it is used
func (m ServerlessRuleAction) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
