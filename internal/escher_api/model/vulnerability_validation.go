// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// VulnerabilityValidation When the rule action is ALLOW, onViolationAction is mandatory
// swagger:model VulnerabilityValidation
type VulnerabilityValidation struct {

	// highest vulnerability allowed
	// Required: true
	HighestVulnerabilityAllowed VulnerabilitySeverity `json:"highestVulnerabilityAllowed"`

	// on violation action
	OnViolationAction OnViolationAction `json:"onViolationAction,omitempty"`
}

// Validate validates this vulnerability validation
func (m *VulnerabilityValidation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHighestVulnerabilityAllowed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnViolationAction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VulnerabilityValidation) validateHighestVulnerabilityAllowed(formats strfmt.Registry) error {

	if err := m.HighestVulnerabilityAllowed.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("highestVulnerabilityAllowed")
		}
		return err
	}

	return nil
}

func (m *VulnerabilityValidation) validateOnViolationAction(formats strfmt.Registry) error {

	if swag.IsZero(m.OnViolationAction) { // not required
		return nil
	}

	if err := m.OnViolationAction.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("onViolationAction")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VulnerabilityValidation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VulnerabilityValidation) UnmarshalBinary(b []byte) error {
	var res VulnerabilityValidation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
