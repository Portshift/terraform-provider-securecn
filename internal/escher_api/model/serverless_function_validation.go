// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ServerlessFunctionValidation serverless function validation
//
// swagger:model ServerlessFunctionValidation
type ServerlessFunctionValidation struct {

	// data access risk
	DataAccessRisk ServerlessDataAccessRisk `json:"dataAccessRisk,omitempty"`

	// function permission risk
	FunctionPermissionRisk ServerlessPolicyRisk `json:"functionPermissionRisk,omitempty"`

	// is unused function
	IsUnusedFunction bool `json:"isUnusedFunction,omitempty"`

	// publicly accessible risk
	PubliclyAccessibleRisk ServerlessPubliclyAccessibleRisk `json:"publiclyAccessibleRisk,omitempty"`

	// risk
	Risk ServerlessFunctionRiskLevel `json:"risk,omitempty"`

	// secrets risk
	SecretsRisk ServerlessSecretsRisk `json:"secretsRisk,omitempty"`

	// vulnerability
	Vulnerability VulnerabilitySeverity `json:"vulnerability,omitempty"`
}

// Validate validates this serverless function validation
func (m *ServerlessFunctionValidation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDataAccessRisk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFunctionPermissionRisk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePubliclyAccessibleRisk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRisk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecretsRisk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVulnerability(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServerlessFunctionValidation) validateDataAccessRisk(formats strfmt.Registry) error {
	if swag.IsZero(m.DataAccessRisk) { // not required
		return nil
	}

	if err := m.DataAccessRisk.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("dataAccessRisk")
		}
		return err
	}

	return nil
}

func (m *ServerlessFunctionValidation) validateFunctionPermissionRisk(formats strfmt.Registry) error {
	if swag.IsZero(m.FunctionPermissionRisk) { // not required
		return nil
	}

	if err := m.FunctionPermissionRisk.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("functionPermissionRisk")
		}
		return err
	}

	return nil
}

func (m *ServerlessFunctionValidation) validatePubliclyAccessibleRisk(formats strfmt.Registry) error {
	if swag.IsZero(m.PubliclyAccessibleRisk) { // not required
		return nil
	}

	if err := m.PubliclyAccessibleRisk.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("publiclyAccessibleRisk")
		}
		return err
	}

	return nil
}

func (m *ServerlessFunctionValidation) validateRisk(formats strfmt.Registry) error {
	if swag.IsZero(m.Risk) { // not required
		return nil
	}

	if err := m.Risk.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("risk")
		}
		return err
	}

	return nil
}

func (m *ServerlessFunctionValidation) validateSecretsRisk(formats strfmt.Registry) error {
	if swag.IsZero(m.SecretsRisk) { // not required
		return nil
	}

	if err := m.SecretsRisk.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("secretsRisk")
		}
		return err
	}

	return nil
}

func (m *ServerlessFunctionValidation) validateVulnerability(formats strfmt.Registry) error {
	if swag.IsZero(m.Vulnerability) { // not required
		return nil
	}

	if err := m.Vulnerability.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("vulnerability")
		}
		return err
	}

	return nil
}

// ContextValidate validate this serverless function validation based on the context it is used
func (m *ServerlessFunctionValidation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDataAccessRisk(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFunctionPermissionRisk(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePubliclyAccessibleRisk(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRisk(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecretsRisk(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServerlessFunctionValidation) contextValidateDataAccessRisk(ctx context.Context, formats strfmt.Registry) error {

	if err := m.DataAccessRisk.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("dataAccessRisk")
		}
		return err
	}

	return nil
}

func (m *ServerlessFunctionValidation) contextValidateFunctionPermissionRisk(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FunctionPermissionRisk.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("functionPermissionRisk")
		}
		return err
	}

	return nil
}

func (m *ServerlessFunctionValidation) contextValidatePubliclyAccessibleRisk(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PubliclyAccessibleRisk.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("publiclyAccessibleRisk")
		}
		return err
	}

	return nil
}

func (m *ServerlessFunctionValidation) contextValidateRisk(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Risk.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("risk")
		}
		return err
	}

	return nil
}

func (m *ServerlessFunctionValidation) contextValidateSecretsRisk(ctx context.Context, formats strfmt.Registry) error {

	if err := m.SecretsRisk.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("secretsRisk")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServerlessFunctionValidation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServerlessFunctionValidation) UnmarshalBinary(b []byte) error {
	var res ServerlessFunctionValidation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
