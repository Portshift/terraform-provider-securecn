// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ServerlessDataAccessRisk serverless data access risk
//
// swagger:model ServerlessDataAccessRisk
type ServerlessDataAccessRisk string

func NewServerlessDataAccessRisk(value ServerlessDataAccessRisk) *ServerlessDataAccessRisk {
	v := value
	return &v
}

const (

	// ServerlessDataAccessRiskNORISK captures enum value "NO_RISK"
	ServerlessDataAccessRiskNORISK ServerlessDataAccessRisk = "NO_RISK"

	// ServerlessDataAccessRiskLOW captures enum value "LOW"
	ServerlessDataAccessRiskLOW ServerlessDataAccessRisk = "LOW"
)

// for schema
var serverlessDataAccessRiskEnum []interface{}

func init() {
	var res []ServerlessDataAccessRisk
	if err := json.Unmarshal([]byte(`["NO_RISK","LOW"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverlessDataAccessRiskEnum = append(serverlessDataAccessRiskEnum, v)
	}
}

func (m ServerlessDataAccessRisk) validateServerlessDataAccessRiskEnum(path, location string, value ServerlessDataAccessRisk) error {
	if err := validate.EnumCase(path, location, value, serverlessDataAccessRiskEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this serverless data access risk
func (m ServerlessDataAccessRisk) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateServerlessDataAccessRiskEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this serverless data access risk based on context it is used
func (m ServerlessDataAccessRisk) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
