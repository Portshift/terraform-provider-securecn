// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TrustedSigner Trusted signers profile
//
// swagger:model TrustedSigner
type TrustedSigner struct {

	// id
	// Read Only: true
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// keys
	// Required: true
	// Min Items: 1
	Keys []*TrustedSignerKey `json:"keys"`

	// name
	// Required: true
	Name *string `json:"name"`

	// trusted signer clusters
	// Required: true
	// Min Items: 1
	TrustedSignerClusters []*TrustedSignerCluster `json:"trustedSignerClusters"`
}

// Validate validates this trusted signer
func (m *TrustedSigner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeys(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrustedSignerClusters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TrustedSigner) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TrustedSigner) validateKeys(formats strfmt.Registry) error {

	if err := validate.Required("keys", "body", m.Keys); err != nil {
		return err
	}

	iKeysSize := int64(len(m.Keys))

	if err := validate.MinItems("keys", "body", iKeysSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.Keys); i++ {
		if swag.IsZero(m.Keys[i]) { // not required
			continue
		}

		if m.Keys[i] != nil {
			if err := m.Keys[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("keys" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TrustedSigner) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *TrustedSigner) validateTrustedSignerClusters(formats strfmt.Registry) error {

	if err := validate.Required("trustedSignerClusters", "body", m.TrustedSignerClusters); err != nil {
		return err
	}

	iTrustedSignerClustersSize := int64(len(m.TrustedSignerClusters))

	if err := validate.MinItems("trustedSignerClusters", "body", iTrustedSignerClustersSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.TrustedSignerClusters); i++ {
		if swag.IsZero(m.TrustedSignerClusters[i]) { // not required
			continue
		}

		if m.TrustedSignerClusters[i] != nil {
			if err := m.TrustedSignerClusters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("trustedSignerClusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this trusted signer based on the context it is used
func (m *TrustedSigner) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKeys(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTrustedSignerClusters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TrustedSigner) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", strfmt.UUID(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *TrustedSigner) contextValidateKeys(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Keys); i++ {

		if m.Keys[i] != nil {
			if err := m.Keys[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("keys" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TrustedSigner) contextValidateTrustedSignerClusters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TrustedSignerClusters); i++ {

		if m.TrustedSignerClusters[i] != nil {
			if err := m.TrustedSignerClusters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("trustedSignerClusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TrustedSigner) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TrustedSigner) UnmarshalBinary(b []byte) error {
	var res TrustedSigner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
