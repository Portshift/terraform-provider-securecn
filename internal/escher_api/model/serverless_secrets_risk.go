// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ServerlessSecretsRisk serverless secrets risk
//
// swagger:model ServerlessSecretsRisk
type ServerlessSecretsRisk string

func NewServerlessSecretsRisk(value ServerlessSecretsRisk) *ServerlessSecretsRisk {
	v := value
	return &v
}

const (

	// ServerlessSecretsRiskNOKNOWNRISK captures enum value "NO_KNOWN_RISK"
	ServerlessSecretsRiskNOKNOWNRISK ServerlessSecretsRisk = "NO_KNOWN_RISK"

	// ServerlessSecretsRiskRISKIDENTIFIED captures enum value "RISK_IDENTIFIED"
	ServerlessSecretsRiskRISKIDENTIFIED ServerlessSecretsRisk = "RISK_IDENTIFIED"
)

// for schema
var serverlessSecretsRiskEnum []interface{}

func init() {
	var res []ServerlessSecretsRisk
	if err := json.Unmarshal([]byte(`["NO_KNOWN_RISK","RISK_IDENTIFIED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverlessSecretsRiskEnum = append(serverlessSecretsRiskEnum, v)
	}
}

func (m ServerlessSecretsRisk) validateServerlessSecretsRiskEnum(path, location string, value ServerlessSecretsRisk) error {
	if err := validate.EnumCase(path, location, value, serverlessSecretsRiskEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this serverless secrets risk
func (m ServerlessSecretsRisk) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateServerlessSecretsRiskEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this serverless secrets risk based on context it is used
func (m ServerlessSecretsRisk) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
