// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ServerlessPolicyRisk serverless policy risk
//
// swagger:model ServerlessPolicyRisk
type ServerlessPolicyRisk string

func NewServerlessPolicyRisk(value ServerlessPolicyRisk) *ServerlessPolicyRisk {
	v := value
	return &v
}

const (

	// ServerlessPolicyRiskNORISK captures enum value "NO_RISK"
	ServerlessPolicyRiskNORISK ServerlessPolicyRisk = "NO_RISK"

	// ServerlessPolicyRiskLOW captures enum value "LOW"
	ServerlessPolicyRiskLOW ServerlessPolicyRisk = "LOW"

	// ServerlessPolicyRiskMEDIUM captures enum value "MEDIUM"
	ServerlessPolicyRiskMEDIUM ServerlessPolicyRisk = "MEDIUM"

	// ServerlessPolicyRiskHIGH captures enum value "HIGH"
	ServerlessPolicyRiskHIGH ServerlessPolicyRisk = "HIGH"

	// ServerlessPolicyRiskCRITICAL captures enum value "CRITICAL"
	ServerlessPolicyRiskCRITICAL ServerlessPolicyRisk = "CRITICAL"
)

// for schema
var serverlessPolicyRiskEnum []interface{}

func init() {
	var res []ServerlessPolicyRisk
	if err := json.Unmarshal([]byte(`["NO_RISK","LOW","MEDIUM","HIGH","CRITICAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverlessPolicyRiskEnum = append(serverlessPolicyRiskEnum, v)
	}
}

func (m ServerlessPolicyRisk) validateServerlessPolicyRiskEnum(path, location string, value ServerlessPolicyRisk) error {
	if err := validate.EnumCase(path, location, value, serverlessPolicyRiskEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this serverless policy risk
func (m ServerlessPolicyRisk) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateServerlessPolicyRiskEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this serverless policy risk based on context it is used
func (m ServerlessPolicyRisk) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
