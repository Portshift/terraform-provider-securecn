// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CdServerlessRule A rule that states what serverless function are allowed and where.
//
// swagger:model CdServerlessRule
type CdServerlessRule struct {

	// action
	// Required: true
	Action *ServerlessRuleAction `json:"action"`

	// group name
	GroupName string `json:"groupName,omitempty"`

	// id
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	ruleField ServerlessRuleType

	// rule origin
	RuleOrigin *ServerlessRuleOrigin `json:"ruleOrigin,omitempty"`

	// scope
	Scope []*ServerlessRuleScope `json:"scope"`

	// status
	// Required: true
	Status *ServerlessRuleStatus `json:"status"`
}

// Rule gets the rule of this base type
func (m *CdServerlessRule) Rule() ServerlessRuleType {
	return m.ruleField
}

// SetRule sets the rule of this base type
func (m *CdServerlessRule) SetRule(val ServerlessRuleType) {
	m.ruleField = val
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *CdServerlessRule) UnmarshalJSON(raw []byte) error {
	var data struct {
		Action *ServerlessRuleAction `json:"action"`

		GroupName string `json:"groupName,omitempty"`

		ID strfmt.UUID `json:"id,omitempty"`

		Name *string `json:"name"`

		Rule json.RawMessage `json:"rule"`

		RuleOrigin *ServerlessRuleOrigin `json:"ruleOrigin,omitempty"`

		Scope []*ServerlessRuleScope `json:"scope"`

		Status *ServerlessRuleStatus `json:"status"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	propRule, err := UnmarshalServerlessRuleType(bytes.NewBuffer(data.Rule), runtime.JSONConsumer())
	if err != nil && err != io.EOF {
		return err
	}

	var result CdServerlessRule

	// action
	result.Action = data.Action

	// groupName
	result.GroupName = data.GroupName

	// id
	result.ID = data.ID

	// name
	result.Name = data.Name

	// rule
	result.ruleField = propRule

	// ruleOrigin
	result.RuleOrigin = data.RuleOrigin

	// scope
	result.Scope = data.Scope

	// status
	result.Status = data.Status

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m CdServerlessRule) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {
		Action *ServerlessRuleAction `json:"action"`

		GroupName string `json:"groupName,omitempty"`

		ID strfmt.UUID `json:"id,omitempty"`

		Name *string `json:"name"`

		RuleOrigin *ServerlessRuleOrigin `json:"ruleOrigin,omitempty"`

		Scope []*ServerlessRuleScope `json:"scope"`

		Status *ServerlessRuleStatus `json:"status"`
	}{

		Action: m.Action,

		GroupName: m.GroupName,

		ID: m.ID,

		Name: m.Name,

		RuleOrigin: m.RuleOrigin,

		Scope: m.Scope,

		Status: m.Status,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Rule ServerlessRuleType `json:"rule"`
	}{

		Rule: m.ruleField,
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this cd serverless rule
func (m *CdServerlessRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuleOrigin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CdServerlessRule) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	if m.Action != nil {
		if err := m.Action.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("action")
			}
			return err
		}
	}

	return nil
}

func (m *CdServerlessRule) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CdServerlessRule) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *CdServerlessRule) validateRule(formats strfmt.Registry) error {

	if err := validate.Required("rule", "body", m.Rule()); err != nil {
		return err
	}

	if err := m.Rule().Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("rule")
		}
		return err
	}

	return nil
}

func (m *CdServerlessRule) validateRuleOrigin(formats strfmt.Registry) error {
	if swag.IsZero(m.RuleOrigin) { // not required
		return nil
	}

	if m.RuleOrigin != nil {
		if err := m.RuleOrigin.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ruleOrigin")
			}
			return err
		}
	}

	return nil
}

func (m *CdServerlessRule) validateScope(formats strfmt.Registry) error {
	if swag.IsZero(m.Scope) { // not required
		return nil
	}

	for i := 0; i < len(m.Scope); i++ {
		if swag.IsZero(m.Scope[i]) { // not required
			continue
		}

		if m.Scope[i] != nil {
			if err := m.Scope[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CdServerlessRule) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cd serverless rule based on the context it is used
func (m *CdServerlessRule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAction(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRuleOrigin(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScope(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CdServerlessRule) contextValidateAction(ctx context.Context, formats strfmt.Registry) error {

	if m.Action != nil {
		if err := m.Action.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("action")
			}
			return err
		}
	}

	return nil
}

func (m *CdServerlessRule) contextValidateRule(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Rule().ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("rule")
		}
		return err
	}

	return nil
}

func (m *CdServerlessRule) contextValidateRuleOrigin(ctx context.Context, formats strfmt.Registry) error {

	if m.RuleOrigin != nil {
		if err := m.RuleOrigin.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ruleOrigin")
			}
			return err
		}
	}

	return nil
}

func (m *CdServerlessRule) contextValidateScope(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Scope); i++ {

		if m.Scope[i] != nil {
			if err := m.Scope[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CdServerlessRule) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {
		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CdServerlessRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CdServerlessRule) UnmarshalBinary(b []byte) error {
	var res CdServerlessRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
