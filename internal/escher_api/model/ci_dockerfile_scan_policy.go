// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// CiDockerfileScanPolicy ci dockerfile scan policy
// swagger:model CiDockerfileScanPolicy
type CiDockerfileScanPolicy struct {

	// a list of dockerfile scan test names (e.g. CIS-DI-0009) to ignore
	DockerfileScanResultsToIgnore []string `json:"dockerfileScanResultsToIgnore,omitempty"`

	// enforcement option
	// Required: true
	EnforcementOption EnforcementOption `json:"enforcementOption"`

	// permissible dockerfile scan severity
	// Required: true
	PermissibleDockerfileScanSeverity DockerfileScanSeverity `json:"permissibleDockerfileScanSeverity"`
}

// Validate validates this ci dockerfile scan policy
func (m *CiDockerfileScanPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnforcementOption(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermissibleDockerfileScanSeverity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CiDockerfileScanPolicy) validateEnforcementOption(formats strfmt.Registry) error {

	if err := m.EnforcementOption.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("enforcementOption")
		}
		return err
	}

	return nil
}

func (m *CiDockerfileScanPolicy) validatePermissibleDockerfileScanSeverity(formats strfmt.Registry) error {

	if err := m.PermissibleDockerfileScanSeverity.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("permissibleDockerfileScanSeverity")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CiDockerfileScanPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CiDockerfileScanPolicy) UnmarshalBinary(b []byte) error {
	var res CiDockerfileScanPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
