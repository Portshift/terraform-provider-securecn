// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ServerlessPubliclyAccessibleRisk serverless publicly accessible risk
//
// swagger:model ServerlessPubliclyAccessibleRisk
type ServerlessPubliclyAccessibleRisk string

func NewServerlessPubliclyAccessibleRisk(value ServerlessPubliclyAccessibleRisk) *ServerlessPubliclyAccessibleRisk {
	v := value
	return &v
}

const (

	// ServerlessPubliclyAccessibleRiskNORISK captures enum value "NO_RISK"
	ServerlessPubliclyAccessibleRiskNORISK ServerlessPubliclyAccessibleRisk = "NO_RISK"

	// ServerlessPubliclyAccessibleRiskLOW captures enum value "LOW"
	ServerlessPubliclyAccessibleRiskLOW ServerlessPubliclyAccessibleRisk = "LOW"

	// ServerlessPubliclyAccessibleRiskMEDIUM captures enum value "MEDIUM"
	ServerlessPubliclyAccessibleRiskMEDIUM ServerlessPubliclyAccessibleRisk = "MEDIUM"
)

// for schema
var serverlessPubliclyAccessibleRiskEnum []interface{}

func init() {
	var res []ServerlessPubliclyAccessibleRisk
	if err := json.Unmarshal([]byte(`["NO_RISK","LOW","MEDIUM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverlessPubliclyAccessibleRiskEnum = append(serverlessPubliclyAccessibleRiskEnum, v)
	}
}

func (m ServerlessPubliclyAccessibleRisk) validateServerlessPubliclyAccessibleRiskEnum(path, location string, value ServerlessPubliclyAccessibleRisk) error {
	if err := validate.EnumCase(path, location, value, serverlessPubliclyAccessibleRiskEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this serverless publicly accessible risk
func (m ServerlessPubliclyAccessibleRisk) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateServerlessPubliclyAccessibleRiskEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this serverless publicly accessible risk based on context it is used
func (m ServerlessPubliclyAccessibleRisk) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
