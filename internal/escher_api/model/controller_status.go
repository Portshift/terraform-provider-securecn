// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ControllerStatus The current controller state.
//
// swagger:model ControllerStatus
type ControllerStatus string

func NewControllerStatus(value ControllerStatus) *ControllerStatus {
	v := value
	return &v
}

const (

	// ControllerStatusPENDINGINSTALL captures enum value "PENDING_INSTALL"
	ControllerStatusPENDINGINSTALL ControllerStatus = "PENDING_INSTALL"

	// ControllerStatusACTIVE captures enum value "ACTIVE"
	ControllerStatusACTIVE ControllerStatus = "ACTIVE"

	// ControllerStatusINACTIVE captures enum value "INACTIVE"
	ControllerStatusINACTIVE ControllerStatus = "INACTIVE"

	// ControllerStatusSTOPPED captures enum value "STOPPED"
	ControllerStatusSTOPPED ControllerStatus = "STOPPED"

	// ControllerStatusTERMINATED captures enum value "TERMINATED"
	ControllerStatusTERMINATED ControllerStatus = "TERMINATED"

	// ControllerStatusUNKNOWN captures enum value "UNKNOWN"
	ControllerStatusUNKNOWN ControllerStatus = "UNKNOWN"

	// ControllerStatusWAITINGFORUSERUPDATE captures enum value "WAITING_FOR_USER_UPDATE"
	ControllerStatusWAITINGFORUSERUPDATE ControllerStatus = "WAITING_FOR_USER_UPDATE"

	// ControllerStatusAUTOUPGRADEINPROGRESS captures enum value "AUTO_UPGRADE_IN_PROGRESS"
	ControllerStatusAUTOUPGRADEINPROGRESS ControllerStatus = "AUTO_UPGRADE_IN_PROGRESS"

	// ControllerStatusAUTOUPDATINGCONFIGURATIONINPROGRESS captures enum value "AUTO_UPDATING_CONFIGURATION_IN_PROGRESS"
	ControllerStatusAUTOUPDATINGCONFIGURATIONINPROGRESS ControllerStatus = "AUTO_UPDATING_CONFIGURATION_IN_PROGRESS"
)

// for schema
var controllerStatusEnum []interface{}

func init() {
	var res []ControllerStatus
	if err := json.Unmarshal([]byte(`["PENDING_INSTALL","ACTIVE","INACTIVE","STOPPED","TERMINATED","UNKNOWN","WAITING_FOR_USER_UPDATE","AUTO_UPGRADE_IN_PROGRESS","AUTO_UPDATING_CONFIGURATION_IN_PROGRESS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		controllerStatusEnum = append(controllerStatusEnum, v)
	}
}

func (m ControllerStatus) validateControllerStatusEnum(path, location string, value ControllerStatus) error {
	if err := validate.EnumCase(path, location, value, controllerStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this controller status
func (m ControllerStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateControllerStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this controller status based on context it is used
func (m ControllerStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
