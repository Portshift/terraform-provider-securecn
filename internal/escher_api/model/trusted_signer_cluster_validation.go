// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TrustedSignerClusterValidation trusted signer cluster validation
//
// swagger:model TrustedSignerClusterValidation
type TrustedSignerClusterValidation string

func NewTrustedSignerClusterValidation(value TrustedSignerClusterValidation) *TrustedSignerClusterValidation {
	v := value
	return &v
}

const (

	// TrustedSignerClusterValidationSIGNATURE captures enum value "SIGNATURE"
	TrustedSignerClusterValidationSIGNATURE TrustedSignerClusterValidation = "SIGNATURE"

	// TrustedSignerClusterValidationHASH captures enum value "HASH"
	TrustedSignerClusterValidationHASH TrustedSignerClusterValidation = "HASH"

	// TrustedSignerClusterValidationNONE captures enum value "NONE"
	TrustedSignerClusterValidationNONE TrustedSignerClusterValidation = "NONE"
)

// for schema
var trustedSignerClusterValidationEnum []interface{}

func init() {
	var res []TrustedSignerClusterValidation
	if err := json.Unmarshal([]byte(`["SIGNATURE","HASH","NONE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		trustedSignerClusterValidationEnum = append(trustedSignerClusterValidationEnum, v)
	}
}

func (m TrustedSignerClusterValidation) validateTrustedSignerClusterValidationEnum(path, location string, value TrustedSignerClusterValidation) error {
	if err := validate.EnumCase(path, location, value, trustedSignerClusterValidationEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this trusted signer cluster validation
func (m TrustedSignerClusterValidation) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTrustedSignerClusterValidationEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this trusted signer cluster validation based on context it is used
func (m TrustedSignerClusterValidation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
