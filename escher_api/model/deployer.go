// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Deployer represent deployer object
// swagger:discriminator Deployer deployerType
type Deployer interface {
	runtime.Validatable

	// deployer
	Deployer() string
	SetDeployer(string)

	// deployer Id
	// Required: true
	// Format: uuid
	DeployerID() *strfmt.UUID
	SetDeployerID(*strfmt.UUID)

	// deployer type
	// Required: true
	// Enum: [OperatorDeployer SecureCnDeployer]
	DeployerType() string
	SetDeployerType(string)

	// id
	// Read Only: true
	// Format: uuid
	ID() strfmt.UUID
	SetID(strfmt.UUID)
}

type deployer struct {
	deployerField string

	deployerIdField *strfmt.UUID

	deployerTypeField string

	idField strfmt.UUID
}

// Deployer gets the deployer of this polymorphic type
func (m *deployer) Deployer() string {
	return m.deployerField
}

// SetDeployer sets the deployer of this polymorphic type
func (m *deployer) SetDeployer(val string) {
	m.deployerField = val
}

// DeployerID gets the deployer Id of this polymorphic type
func (m *deployer) DeployerID() *strfmt.UUID {
	return m.deployerIdField
}

// SetDeployerID sets the deployer Id of this polymorphic type
func (m *deployer) SetDeployerID(val *strfmt.UUID) {
	m.deployerIdField = val
}

// DeployerType gets the deployer type of this polymorphic type
func (m *deployer) DeployerType() string {
	return "Deployer"
}

// SetDeployerType sets the deployer type of this polymorphic type
func (m *deployer) SetDeployerType(val string) {

}

// ID gets the id of this polymorphic type
func (m *deployer) ID() strfmt.UUID {
	return m.idField
}

// SetID sets the id of this polymorphic type
func (m *deployer) SetID(val strfmt.UUID) {
	m.idField = val
}

// UnmarshalDeployerSlice unmarshals polymorphic slices of Deployer
func UnmarshalDeployerSlice(reader io.Reader, consumer runtime.Consumer) ([]Deployer, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []Deployer
	for _, element := range elements {
		obj, err := unmarshalDeployer(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalDeployer unmarshals polymorphic Deployer
func UnmarshalDeployer(reader io.Reader, consumer runtime.Consumer) (Deployer, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalDeployer(data, consumer)
}

func unmarshalDeployer(data []byte, consumer runtime.Consumer) (Deployer, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the deployerType property.
	var getType struct {
		DeployerType string `json:"deployerType"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("deployerType", "body", getType.DeployerType); err != nil {
		return nil, err
	}

	// The value of deployerType is used to determine which type to create and unmarshal the data into
	switch getType.DeployerType {
	case "Deployer":
		var result deployer
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "OperatorDeployer":
		var result OperatorDeployer
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "SecureCnDeployer":
		var result SecureCnDeployer
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid deployerType value: %q", getType.DeployerType)

}

// Validate validates this deployer
func (m *deployer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeployerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *deployer) validateDeployerID(formats strfmt.Registry) error {

	if err := validate.Required("deployerId", "body", m.DeployerID()); err != nil {
		return err
	}

	if err := validate.FormatOf("deployerId", "body", "uuid", m.DeployerID().String(), formats); err != nil {
		return err
	}

	return nil
}

var deployerTypeDeployerTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OperatorDeployer","SecureCnDeployer"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deployerTypeDeployerTypePropEnum = append(deployerTypeDeployerTypePropEnum, v)
	}
}

const (

	// DeployerDeployerTypeOperatorDeployer captures enum value "OperatorDeployer"
	DeployerDeployerTypeOperatorDeployer string = "OperatorDeployer"

	// DeployerDeployerTypeSecureCnDeployer captures enum value "SecureCnDeployer"
	DeployerDeployerTypeSecureCnDeployer string = "SecureCnDeployer"
)

// prop value enum
func (m *deployer) validateDeployerTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, deployerTypeDeployerTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *deployer) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID()) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID().String(), formats); err != nil {
		return err
	}

	return nil
}
