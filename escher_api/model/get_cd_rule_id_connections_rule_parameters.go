// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetCdRuleIDConnectionsRuleParams creates a new GetCdRuleIDConnectionsRuleParams object
// with the default values initialized.
func NewGetCdRuleIDConnectionsRuleParams() *GetCdRuleIDConnectionsRuleParams {
	var ()
	return &GetCdRuleIDConnectionsRuleParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetCdRuleIDConnectionsRuleParamsWithTimeout creates a new GetCdRuleIDConnectionsRuleParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetCdRuleIDConnectionsRuleParamsWithTimeout(timeout time.Duration) *GetCdRuleIDConnectionsRuleParams {
	var ()
	return &GetCdRuleIDConnectionsRuleParams{

		timeout: timeout,
	}
}

// NewGetCdRuleIDConnectionsRuleParamsWithContext creates a new GetCdRuleIDConnectionsRuleParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetCdRuleIDConnectionsRuleParamsWithContext(ctx context.Context) *GetCdRuleIDConnectionsRuleParams {
	var ()
	return &GetCdRuleIDConnectionsRuleParams{

		Context: ctx,
	}
}

// NewGetCdRuleIDConnectionsRuleParamsWithHTTPClient creates a new GetCdRuleIDConnectionsRuleParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetCdRuleIDConnectionsRuleParamsWithHTTPClient(client *http.Client) *GetCdRuleIDConnectionsRuleParams {
	var ()
	return &GetCdRuleIDConnectionsRuleParams{
		HTTPClient: client,
	}
}

/*GetCdRuleIDConnectionsRuleParams contains all the parameters to send to the API endpoint
for the get cd rule ID connections rule operation typically these are written to a http.Request
*/
type GetCdRuleIDConnectionsRuleParams struct {

	/*RuleID
	  ruleId (uid)

	*/
	RuleID strfmt.UUID

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get cd rule ID connections rule params
func (o *GetCdRuleIDConnectionsRuleParams) WithTimeout(timeout time.Duration) *GetCdRuleIDConnectionsRuleParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get cd rule ID connections rule params
func (o *GetCdRuleIDConnectionsRuleParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get cd rule ID connections rule params
func (o *GetCdRuleIDConnectionsRuleParams) WithContext(ctx context.Context) *GetCdRuleIDConnectionsRuleParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get cd rule ID connections rule params
func (o *GetCdRuleIDConnectionsRuleParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get cd rule ID connections rule params
func (o *GetCdRuleIDConnectionsRuleParams) WithHTTPClient(client *http.Client) *GetCdRuleIDConnectionsRuleParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get cd rule ID connections rule params
func (o *GetCdRuleIDConnectionsRuleParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRuleID adds the ruleID to the get cd rule ID connections rule params
func (o *GetCdRuleIDConnectionsRuleParams) WithRuleID(ruleID strfmt.UUID) *GetCdRuleIDConnectionsRuleParams {
	o.SetRuleID(ruleID)
	return o
}

// SetRuleID adds the ruleId to the get cd rule ID connections rule params
func (o *GetCdRuleIDConnectionsRuleParams) SetRuleID(ruleID strfmt.UUID) {
	o.RuleID = ruleID
}

// WriteToRequest writes these params to a swagger request
func (o *GetCdRuleIDConnectionsRuleParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param ruleId
	if err := r.SetPathParam("ruleId", o.RuleID.String()); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
