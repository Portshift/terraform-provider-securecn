// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CiPolicy ci policy
// swagger:model CiPolicy
type CiPolicy struct {

	// description
	Description string `json:"description,omitempty"`

	// dockerfile scan ci policy
	DockerfileScanCiPolicy *CiDockerfileScanPolicy `json:"dockerfileScanCiPolicy,omitempty"`

	// id
	// Read Only: true
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// vulnerability ci policy
	VulnerabilityCiPolicy *CiVulnerabilityPolicy `json:"vulnerabilityCiPolicy,omitempty"`
}

// Validate validates this ci policy
func (m *CiPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDockerfileScanCiPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVulnerabilityCiPolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CiPolicy) validateDockerfileScanCiPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.DockerfileScanCiPolicy) { // not required
		return nil
	}

	if m.DockerfileScanCiPolicy != nil {
		if err := m.DockerfileScanCiPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dockerfileScanCiPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *CiPolicy) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CiPolicy) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *CiPolicy) validateVulnerabilityCiPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.VulnerabilityCiPolicy) { // not required
		return nil
	}

	if m.VulnerabilityCiPolicy != nil {
		if err := m.VulnerabilityCiPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vulnerabilityCiPolicy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CiPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CiPolicy) UnmarshalBinary(b []byte) error {
	var res CiPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
