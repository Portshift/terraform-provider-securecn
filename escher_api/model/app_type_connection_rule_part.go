// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// AppTypeConnectionRulePart app type connection rule part
// swagger:model AppTypeConnectionRulePart
type AppTypeConnectionRulePart struct {

	// environments
	Environments []string `json:"environments"`

	// types
	Types []string `json:"types"`
}

// ConnectionRulePartType gets the connection rule part type of this subtype
func (m *AppTypeConnectionRulePart) ConnectionRulePartType() string {
	return "AppTypeConnectionRulePart"
}

// SetConnectionRulePartType sets the connection rule part type of this subtype
func (m *AppTypeConnectionRulePart) SetConnectionRulePartType(val string) {

}

// Environments gets the environments of this subtype

// Types gets the types of this subtype

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *AppTypeConnectionRulePart) UnmarshalJSON(raw []byte) error {
	var data struct {

		// environments
		Environments []string `json:"environments"`

		// types
		Types []string `json:"types"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		ConnectionRulePartType string `json:"connectionRulePartType"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result AppTypeConnectionRulePart

	if base.ConnectionRulePartType != result.ConnectionRulePartType() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid connectionRulePartType value: %q", base.ConnectionRulePartType)
	}

	result.Environments = data.Environments

	result.Types = data.Types

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m AppTypeConnectionRulePart) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// environments
		Environments []string `json:"environments"`

		// types
		Types []string `json:"types"`
	}{

		Environments: m.Environments,

		Types: m.Types,
	},
	)
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		ConnectionRulePartType string `json:"connectionRulePartType"`
	}{

		ConnectionRulePartType: m.ConnectionRulePartType(),
	},
	)
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this app type connection rule part
func (m *AppTypeConnectionRulePart) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *AppTypeConnectionRulePart) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AppTypeConnectionRulePart) UnmarshalBinary(b []byte) error {
	var res AppTypeConnectionRulePart
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
