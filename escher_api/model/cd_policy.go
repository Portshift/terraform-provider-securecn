// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CdPolicy cd policy
// swagger:model CdPolicy
type CdPolicy struct {

	// api security cd policy
	APISecurityCdPolicy *APISecurityCdPolicyElement `json:"apiSecurityCdPolicy,omitempty"`

	// deployers
	// Required: true
	// Max Items: 10
	// Min Items: 1
	Deployers []strfmt.UUID `json:"deployers"`

	// description
	Description string `json:"description,omitempty"`

	// id
	// Read Only: true
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// permission c d policy
	PermissionCDPolicy *CdPolicyElement `json:"permissionCDPolicy,omitempty"`

	// secret c d policy
	SecretCDPolicy *SecretsCdPolicyElement `json:"secretCDPolicy,omitempty"`

	// security context c d policy
	SecurityContextCDPolicy *CdPolicyElement `json:"securityContextCDPolicy,omitempty"`
}

// Validate validates this cd policy
func (m *CdPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAPISecurityCdPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeployers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermissionCDPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecretCDPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityContextCDPolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CdPolicy) validateAPISecurityCdPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.APISecurityCdPolicy) { // not required
		return nil
	}

	if m.APISecurityCdPolicy != nil {
		if err := m.APISecurityCdPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("apiSecurityCdPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *CdPolicy) validateDeployers(formats strfmt.Registry) error {

	if err := validate.Required("deployers", "body", m.Deployers); err != nil {
		return err
	}

	iDeployersSize := int64(len(m.Deployers))

	if err := validate.MinItems("deployers", "body", iDeployersSize, 1); err != nil {
		return err
	}

	if err := validate.MaxItems("deployers", "body", iDeployersSize, 10); err != nil {
		return err
	}

	for i := 0; i < len(m.Deployers); i++ {

		if err := validate.FormatOf("deployers"+"."+strconv.Itoa(i), "body", "uuid", m.Deployers[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *CdPolicy) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CdPolicy) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *CdPolicy) validatePermissionCDPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.PermissionCDPolicy) { // not required
		return nil
	}

	if m.PermissionCDPolicy != nil {
		if err := m.PermissionCDPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("permissionCDPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *CdPolicy) validateSecretCDPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.SecretCDPolicy) { // not required
		return nil
	}

	if m.SecretCDPolicy != nil {
		if err := m.SecretCDPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secretCDPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *CdPolicy) validateSecurityContextCDPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.SecurityContextCDPolicy) { // not required
		return nil
	}

	if m.SecurityContextCDPolicy != nil {
		if err := m.SecurityContextCDPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("securityContextCDPolicy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CdPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CdPolicy) UnmarshalBinary(b []byte) error {
	var res CdPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
