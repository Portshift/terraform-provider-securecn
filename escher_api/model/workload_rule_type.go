// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"
)

// WorkloadRuleType identify the workload type. Only one of the below should be not null, and  used.
// swagger:discriminator WorkloadRuleType workloadRuleType
type WorkloadRuleType interface {
	runtime.Validatable

	// workload rule type
	// Required: true
	// Enum: [AppNameWorkloadRuleType AppTypeWorkloadRuleType AppLabelWorkloadRuleType AppAnyWorkloadRuleType PodNameWorkloadRuleType PodLabelWorkloadRuleType PodAnyWorkloadRuleType]
	WorkloadRuleType() string
	SetWorkloadRuleType(string)
}

type workloadRuleType struct {
	workloadRuleTypeField string
}

// WorkloadRuleType gets the workload rule type of this polymorphic type
func (m *workloadRuleType) WorkloadRuleType() string {
	return "WorkloadRuleType"
}

// SetWorkloadRuleType sets the workload rule type of this polymorphic type
func (m *workloadRuleType) SetWorkloadRuleType(val string) {

}

// UnmarshalWorkloadRuleTypeSlice unmarshals polymorphic slices of WorkloadRuleType
func UnmarshalWorkloadRuleTypeSlice(reader io.Reader, consumer runtime.Consumer) ([]WorkloadRuleType, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []WorkloadRuleType
	for _, element := range elements {
		obj, err := unmarshalWorkloadRuleType(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalWorkloadRuleType unmarshals polymorphic WorkloadRuleType
func UnmarshalWorkloadRuleType(reader io.Reader, consumer runtime.Consumer) (WorkloadRuleType, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalWorkloadRuleType(data, consumer)
}

func unmarshalWorkloadRuleType(data []byte, consumer runtime.Consumer) (WorkloadRuleType, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the workloadRuleType property.
	var getType struct {
		WorkloadRuleType string `json:"workloadRuleType"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("workloadRuleType", "body", getType.WorkloadRuleType); err != nil {
		return nil, err
	}

	// The value of workloadRuleType is used to determine which type to create and unmarshal the data into
	switch getType.WorkloadRuleType {
	case "PodAnyWorkloadRuleType":
		var result PodAnyWorkloadRuleType
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "PodLabelWorkloadRuleType":
		var result PodLabelWorkloadRuleType
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "PodNameWorkloadRuleType":
		var result PodNameWorkloadRuleType
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "WorkloadRuleType":
		var result workloadRuleType
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid workloadRuleType value: %q", getType.WorkloadRuleType)

}

// Validate validates this workload rule type
func (m *workloadRuleType) Validate(formats strfmt.Registry) error {
	return nil
}
