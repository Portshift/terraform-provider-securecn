// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// SecretsCdPolicyElement secrets cd policy element
// swagger:model SecretsCdPolicyElement
type SecretsCdPolicyElement struct {

	// The action that should be taken on the pipeline
	// Required: true
	EnforcementOption EnforcementOption `json:"enforcementOption"`

	// The permissible risk level in the pipeline
	// Required: true
	PermissibleVulnerabilityLevel CDPipelineSecretsFindingRisk `json:"permissibleVulnerabilityLevel"`
}

// Validate validates this secrets cd policy element
func (m *SecretsCdPolicyElement) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnforcementOption(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermissibleVulnerabilityLevel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecretsCdPolicyElement) validateEnforcementOption(formats strfmt.Registry) error {

	if err := m.EnforcementOption.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("enforcementOption")
		}
		return err
	}

	return nil
}

func (m *SecretsCdPolicyElement) validatePermissibleVulnerabilityLevel(formats strfmt.Registry) error {

	if err := m.PermissibleVulnerabilityLevel.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("permissibleVulnerabilityLevel")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SecretsCdPolicyElement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecretsCdPolicyElement) UnmarshalBinary(b []byte) error {
	var res SecretsCdPolicyElement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
