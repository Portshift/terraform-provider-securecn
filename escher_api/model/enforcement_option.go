// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// EnforcementOption The action that should be taken on the pipeline
// swagger:model EnforcementOption
type EnforcementOption string

const (

	// EnforcementOptionFAIL captures enum value "FAIL"
	EnforcementOptionFAIL EnforcementOption = "FAIL"

	// EnforcementOptionIGNORE captures enum value "IGNORE"
	EnforcementOptionIGNORE EnforcementOption = "IGNORE"
)

// for schema
var enforcementOptionEnum []interface{}

func init() {
	var res []EnforcementOption
	if err := json.Unmarshal([]byte(`["FAIL","IGNORE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		enforcementOptionEnum = append(enforcementOptionEnum, v)
	}
}

func (m EnforcementOption) validateEnforcementOptionEnum(path, location string, value EnforcementOption) error {
	if err := validate.Enum(path, location, value, enforcementOptionEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this enforcement option
func (m EnforcementOption) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEnforcementOptionEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
