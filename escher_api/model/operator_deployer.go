// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OperatorDeployer operator deployer
// swagger:model OperatorDeployer
type OperatorDeployer struct {
	deployerField string

	deployerIdField *strfmt.UUID

	idField strfmt.UUID

	// cluster
	// Read Only: true
	Cluster string `json:"cluster,omitempty"`

	// cluster Id
	// Format: uuid
	ClusterID strfmt.UUID `json:"clusterId,omitempty"`

	// namespace
	// Read Only: true
	Namespace string `json:"namespace,omitempty"`

	// namespace Id
	// Format: uuid
	NamespaceID strfmt.UUID `json:"namespaceId,omitempty"`

	// rule creation
	RuleCreation *bool `json:"ruleCreation,omitempty"`

	// security check
	SecurityCheck *bool `json:"securityCheck,omitempty"`
}

// Deployer gets the deployer of this subtype
func (m *OperatorDeployer) Deployer() string {
	return m.deployerField
}

// SetDeployer sets the deployer of this subtype
func (m *OperatorDeployer) SetDeployer(val string) {
	m.deployerField = val
}

// DeployerID gets the deployer Id of this subtype
func (m *OperatorDeployer) DeployerID() *strfmt.UUID {
	return m.deployerIdField
}

// SetDeployerID sets the deployer Id of this subtype
func (m *OperatorDeployer) SetDeployerID(val *strfmt.UUID) {
	m.deployerIdField = val
}

// DeployerType gets the deployer type of this subtype
func (m *OperatorDeployer) DeployerType() string {
	return "OperatorDeployer"
}

// SetDeployerType sets the deployer type of this subtype
func (m *OperatorDeployer) SetDeployerType(val string) {

}

// ID gets the id of this subtype
func (m *OperatorDeployer) ID() strfmt.UUID {
	return m.idField
}

// SetID sets the id of this subtype
func (m *OperatorDeployer) SetID(val strfmt.UUID) {
	m.idField = val
}

// Cluster gets the cluster of this subtype

// ClusterID gets the cluster Id of this subtype

// Namespace gets the namespace of this subtype

// NamespaceID gets the namespace Id of this subtype

// RuleCreation gets the rule creation of this subtype

// SecurityCheck gets the security check of this subtype

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *OperatorDeployer) UnmarshalJSON(raw []byte) error {
	var data struct {

		// cluster
		// Read Only: true
		Cluster string `json:"cluster,omitempty"`

		// cluster Id
		// Format: uuid
		ClusterID strfmt.UUID `json:"clusterId,omitempty"`

		// namespace
		// Read Only: true
		Namespace string `json:"namespace,omitempty"`

		// namespace Id
		// Format: uuid
		NamespaceID strfmt.UUID `json:"namespaceId,omitempty"`

		// rule creation
		RuleCreation *bool `json:"ruleCreation,omitempty"`

		// security check
		SecurityCheck *bool `json:"securityCheck,omitempty"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		Deployer string `json:"deployer,omitempty"`

		DeployerID *strfmt.UUID `json:"deployerId"`

		DeployerType string `json:"deployerType"`

		ID strfmt.UUID `json:"id,omitempty"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result OperatorDeployer

	result.deployerField = base.Deployer

	result.deployerIdField = base.DeployerID

	if base.DeployerType != result.DeployerType() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid deployerType value: %q", base.DeployerType)
	}

	result.idField = base.ID

	result.Cluster = data.Cluster

	result.ClusterID = data.ClusterID

	result.Namespace = data.Namespace

	result.NamespaceID = data.NamespaceID

	result.RuleCreation = data.RuleCreation

	result.SecurityCheck = data.SecurityCheck

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m OperatorDeployer) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// cluster
		// Read Only: true
		Cluster string `json:"cluster,omitempty"`

		// cluster Id
		// Format: uuid
		ClusterID strfmt.UUID `json:"clusterId,omitempty"`

		// namespace
		// Read Only: true
		Namespace string `json:"namespace,omitempty"`

		// namespace Id
		// Format: uuid
		NamespaceID strfmt.UUID `json:"namespaceId,omitempty"`

		// rule creation
		RuleCreation *bool `json:"ruleCreation,omitempty"`

		// security check
		SecurityCheck *bool `json:"securityCheck,omitempty"`
	}{

		Cluster: m.Cluster,

		ClusterID: m.ClusterID,

		Namespace: m.Namespace,

		NamespaceID: m.NamespaceID,

		RuleCreation: m.RuleCreation,

		SecurityCheck: m.SecurityCheck,
	},
	)
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Deployer string `json:"deployer,omitempty"`

		DeployerID *strfmt.UUID `json:"deployerId"`

		DeployerType string `json:"deployerType"`

		ID strfmt.UUID `json:"id,omitempty"`
	}{

		Deployer: m.Deployer(),

		DeployerID: m.DeployerID(),

		DeployerType: m.DeployerType(),

		ID: m.ID(),
	},
	)
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this operator deployer
func (m *OperatorDeployer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeployerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespaceID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OperatorDeployer) validateDeployerID(formats strfmt.Registry) error {

	if err := validate.Required("deployerId", "body", m.DeployerID()); err != nil {
		return err
	}

	if err := validate.FormatOf("deployerId", "body", "uuid", m.DeployerID().String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OperatorDeployer) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID()) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID().String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OperatorDeployer) validateClusterID(formats strfmt.Registry) error {

	if swag.IsZero(m.ClusterID) { // not required
		return nil
	}

	if err := validate.FormatOf("clusterId", "body", "uuid", m.ClusterID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OperatorDeployer) validateNamespaceID(formats strfmt.Registry) error {

	if swag.IsZero(m.NamespaceID) { // not required
		return nil
	}

	if err := validate.FormatOf("namespaceId", "body", "uuid", m.NamespaceID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OperatorDeployer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OperatorDeployer) UnmarshalBinary(b []byte) error {
	var res OperatorDeployer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
