// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// PostDeployersReader is a Reader for the PostDeployers structure.
type PostDeployersReader struct {
	Formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostDeployersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewPostDeployersCreated()
		if err := result.readResponse(response, consumer, o.Formats); err != nil {
			return nil, err
		}
		return result, nil
	case 409:
		result := NewPostDeployersConflict()
		if err := result.readResponse(response, consumer, o.Formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostDeployersCreated creates a PostDeployersCreated with default headers values
func NewPostDeployersCreated() *PostDeployersCreated {
	return &PostDeployersCreated{}
}

/*PostDeployersCreated handles this case with default header values.

A new deployer was added.
*/
type PostDeployersCreated struct {
	Payload Deployer
}

func (o *PostDeployersCreated) Error() string {
	return fmt.Sprintf("[POST /deployers][%d] postDeployersCreated  %+v", 201, o.Payload)
}

func (o *PostDeployersCreated) GetPayload() Deployer {
	return o.Payload
}

func (o *PostDeployersCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload as interface type
	payload, err := UnmarshalDeployer(response.Body(), consumer)
	if err != nil {
		return err
	}
	o.Payload = payload

	return nil
}

// NewPostDeployersConflict creates a PostDeployersConflict with default headers values
func NewPostDeployersConflict() *PostDeployersConflict {
	return &PostDeployersConflict{}
}

/*PostDeployersConflict handles this case with default header values.

An existing deployer already has this name

*/
type PostDeployersConflict struct {
}

func (o *PostDeployersConflict) Error() string {
	return fmt.Sprintf("[POST /deployers][%d] postDeployersConflict ", 409)
}

func (o *PostDeployersConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
